/*! * @name            pointerManager.js * * @client          CLIENT NAME * @description     main frontend application - UI/UX features for responsive websites * @libs            Modernizr, etc. * @author          Ansgar Hiller (www.weigelstein.de) */var PointerManager = {    MOUSE_POINTER_TYPE: 'mouse',    TOUCH_POINTER_TYPE: 'touch',    POINTER_EVENT_TIMEOUT_MS: 500,    standardTouch: false,    touchDetectionEvent: null,    lastTouchType: null,    pointerTimeout: null,    pointerEventLock: false,    getPointerEventsSupported: function() { return this.standardTouch; },    getPointerEventsInputTypes: function() {        if (window.navigator.pointerEnabled) {            return {                MOUSE: 'mouse',                TOUCH: 'touch',                PEN: 'pen'            };        } else if (window.navigator.msPointerEnabled) {            return {                MOUSE:  0x00000004,                TOUCH:  0x00000002,                PEN:    0x00000003            };        } else {             return {};        }    },    getPointer: function() {        if(Modernizr.ios) {            return this.TOUCH_POINTER_TYPE;        }        if(this.lastTouchType) {            return this.lastTouchType;        }        return Modernizr.touch ? this.TOUCH_POINTER_TYPE : this.MOUSE_POINTER_TYPE;    },    setPointerEventLock: function() { this.pointerEventLock = true; },    clearPointerEventLock: function() { this.pointerEventLock = false; },    setPointerEventLockTimeout: function() {        var that = this;        if ( this.pointerTimeout ) {            clearTimeout(this.pointerTimeout);        }        this.setPointerEventLock();        this.pointerTimeout = setTimeout(function() { that.clearPointerEventLock(); }, this.POINTER_EVENT_TIMEOUT_MS);    },    triggerMouseEvent: function(originalEvent) {        if(this.lastTouchType === this.MOUSE_POINTER_TYPE) { return false; }        this.lastTouchType = this.MOUSE_POINTER_TYPE;        jQuery(window).trigger('mouse-detected', originalEvent);    },    triggerTouchEvent: function(originalEvent) {        if(this.lastTouchType === this.TOUCH_POINTER_TYPE) { return false; }        this.lastTouchType = this.TOUCH_POINTER_TYPE;        jQuery(window).trigger('touch-detected', originalEvent);    },    initEnv: function() {        if (window.navigator.pointerEnabled) {            this.standardTouch = true;            this.touchDetectionEvent = 'pointermove';        } else if (window.navigator.msPointerEnabled) {            this.standardTouch = true;            this.touchDetectionEvent = 'MSPointerMove';        } else {            this.touchDetectionEvent = 'touchstart';        }    },    wirePointerDetection: function() {        var that = this;        if(this.standardTouch) {             jQuery(window).on(this.touchDetectionEvent, function(e) {                switch(e.originalEvent.pointerType) {                    case that.getPointerEventsInputTypes().MOUSE:                        that.triggerMouseEvent(e);                        break;                    case that.getPointerEventsInputTypes().TOUCH:                    case that.getPointerEventsInputTypes().PEN:                        that.triggerTouchEvent(e);                        break;                }            });        } else {            jQuery(window).on(this.touchDetectionEvent, function(e) {                if(that.pointerEventLock) {                    return;                }                that.setPointerEventLockTimeout();                that.triggerTouchEvent(e);            });            jQuery(document).on('mouseover', function(e) {                if(that.pointerEventLock) { return false; }                that.setPointerEventLockTimeout();                that.triggerMouseEvent(e);            });        }    },    init: function() {        this.initEnv();        this.wirePointerDetection();    }};